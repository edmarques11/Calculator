{"version":3,"sources":["components/Button.jsx","main/Calculator.jsx","components/Display.jsx","serviceWorker.js","index.js"],"names":["props","classes","operation","double","triple","onClick","evento","click","target","innerHTML","className","label","initialState","displayValue","clearDisplay","values","current","Calculator","state","clearMemory","bind","setOperation","addDigit","this","setState","equals","currentOperation","eval","e","n","includes","i","newValue","parseFloat","Fragment","value","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.87f856ab.chunk.js","sourcesContent":["import React from 'react';\nimport './Button.css';\n\nexport default (props) => {\n    let classes = 'button ';\n    classes += props.operation ? 'operation' : '';\n    classes += props.double ? 'double' : '';\n    classes += props.triple ? 'triple' : '';\n\n    return (\n        <button onClick={(evento) => props.click && props.click(evento.target.innerHTML)}\n            className={classes}>\n            {props.label}\n        </button>\n    )\n}","import React, { Component } from 'react';\nimport './Calculator.css';\n\nimport Button from '../components/Button';\nimport Display from '../components/Display';\n\nconst initialState = {\n    displayValue: '0',\n    clearDisplay: false,\n    operation: null,\n    values: [0, 0],\n    current: 0\n};\n\nexport default class Calculator extends Component {\n\n    state = { ...initialState };\n\n    constructor(props) {\n        super(props);\n        this.clearMemory = this.clearMemory.bind(this);\n        this.setOperation = this.setOperation.bind(this);\n        this.addDigit = this.addDigit.bind(this);\n    };\n\n    clearMemory() {\n        this.setState({ ...initialState });\n    };\n\n    setOperation(operation) {\n        if (this.state.current === 0) {\n            this.setState({ operation, current: 1, clearDisplay: true });\n        } else {\n            const equals = operation === '=';\n            const currentOperation = this.state.operation;\n\n            const values = [...this.state.values];\n            try {\n                values[0] = eval(`${values[0]} ${currentOperation} ${values[1]}`);// eslint-disable-next-line\n            } catch (e) {\n                values[0] = this.state.values[0];\n            };\n\n            values[1] = 0;\n\n            this.setState({\n                displayValue: values[0],\n                operation: equals ? null : operation,\n                current: equals ? 0 : 1,\n                clearDisplay: !equals,\n                values\n            });\n        };\n    };\n\n    addDigit(n) {\n        if (n === '.' && this.state.displayValue.includes('.')) {\n            return;\n        }\n\n        const clearDisplay = this.state.displayValue === '0'\n            || this.state.clearDisplay;\n        const currentValue = clearDisplay ? '' : this.state.displayValue;\n        const displayValue = currentValue + n;\n        this.setState({ displayValue, clearDisplay: false });\n\n        if (n !== '.') {\n            const i = this.state.current;\n            const newValue = parseFloat(displayValue);\n            const values = [...this.state.values];\n            values[i] = newValue;\n            this.setState({ values });\n            // console.log(values);\n        };\n    };\n\n    render() {\n        // const addDigit = (n) => this.addDigit(n);\n        // const setOperation = (op) => this.setOperation(op);\n        return (\n            <React.Fragment>\n                <div className=\"calculator\">\n                    <Display value={this.state.displayValue} />\n                    <Button label=\"AC\" click={() => this.clearMemory()} triple />\n                    <Button label=\"/\" click={this.setOperation} operation />\n                    <Button label=\"7\" click={this.addDigit} />\n                    <Button label=\"8\" click={this.addDigit} />\n                    <Button label=\"9\" click={this.addDigit} />\n                    <Button label=\"*\" click={this.setOperation} operation />\n                    <Button label=\"4\" click={this.addDigit} />\n                    <Button label=\"5\" click={this.addDigit} />\n                    <Button label=\"6\" click={this.addDigit} />\n                    <Button label=\"-\" click={this.setOperation} operation />\n                    <Button label=\"1\" click={this.addDigit} />\n                    <Button label=\"2\" click={this.addDigit} />\n                    <Button label=\"3\" click={this.addDigit} />\n                    <Button label=\"+\" click={this.setOperation} operation />\n                    <Button label=\"0\" click={this.addDigit} double />\n                    <Button label=\".\" click={this.addDigit} />\n                    <Button label=\"=\" click={this.setOperation} operation />\n                </div>\n                <div className=\"produtor\">Make by&nbsp;\n                <a href=\"https://edmarques11.github.io/Calculator/\">Edmarques Lima</a>.</div>\n            </React.Fragment>\n        );\n    };\n};","import React from 'react';\nimport './Display.css';\n\nexport default (props) =>\n    <div className=\"display\">{props.value}</div>","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './main/Calculator';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div>\n      <h1>Calculator</h1>\n      <Calculator />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}